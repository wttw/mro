# How to connect to the database. Either a connection string or a URI.
ConnectionString = ""

# Generate code based on these tables. Use "*" as a glob-style wildcard
IncludeTables = ["public.*"]

# Don't use these tables. Overrides IncludeTables.
ExcludeTables = []

# The Go types to use for table fields that have a not null constraint
NotNullTypes {
    boolean = "bool"
    bytea = "[]byte"
    cidr = "net.IP"
    circle = "pgtype.Circle"
    date = "time.Time"
    daterange = "pgtype.Daterange"
    float4 = "float32"
    float8 = "float64"
    hstore = "pgtype.Hstore"
    inet = "net.IP"
    integer = "int"
    interval = "time.Duration"
    json = "pgtype.JSON"
    jsonb = "pgtype.JSONB"
    macaddr = "pgtype.Macaddr"
    numeric = "float64"
    smallint = "int"
    text = "string"
    "text[]" = "[]string"
    timestamptz = "time.Time"
    timestamp = "time.Time"
    uuid = "uuid.UUID"
    varchar = "string"
}

# The Go types to use for table fields that may be null
Types {
    bigint = "sql.NullInt64"
    boolean = "sql.NullBool"
    bytea = "[]byte"
    cidr = "*net.IP"
    "cidr[]" = "pgtype.CIDRArray"
    circle = "pgtype.Circle"
    date = "pq.NullTime"
    daterange = "pgtype.Daterange"
    float4 = "sql.NullFLoat64"
    float8 = "sql.NullFloat64"
    hstore = "pgtype.Hstore"
    inet = "*net.IP"
    "inet[]" = "pgtype.InetArray"
    integer = "sql.NullInt64"
    interval = "*time.Duration"
    json = "pgtype.JSON"
    jsonb = "pgtype.JSONB"
    macaddr = "pgtype.Macaddr"
    numeric = "sql.NullFloat64"
    smallint = "sql.NullInt64"
    text = "sql.NullString"
    timestamptz = "pq.NullTime"
    timestamp = "pq.NullTime"
    uuid = "uuid.NullUUID"
    varchar = "sql.NullString"
}

# Output useful data extracted from the database to this file if set.
JsonOutput = "mro.json"

# Write enum code to this filename. Uses go templates with .Schema and .Name
EnumFilename = "{{.Name}}.mro.go"

# Use this template to generate enum code.
EnumTemplate = "enum.pgx.tpl"

# Write table code to this filename. Uses go templates with .Schema and .Name
TableFilename= "{{.Name}}.mro.go"

# Use this template to generate table code.
TableTemplate = "table.pgx.tpl"

# Write global code to this filename.
GlobalFilename = "mropgx.go"

# Use this template to generate global code
GlobalTemplate = "global.pgx.tpl"

# Run these commands on each file after generation
PostProcess = ["goimports -w"]

TemplateParameters {
    # Add any additional template parameters here
}

Queries {
    # Add any SQL queries you want here, e.g.:
    #
    #     ConfigByID = "select * from config where id = $1"
    #
    # Add /* name */ or /* name GoType */ after a parameter to
    # customize the name and type it uses, e.g.:
    #
    #    ConfigByID = "select * from config where id = $1 /* configID int */"
}
