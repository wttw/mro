// Code generated by go-bindata.
// sources:
// styles/pgx/description.txt
// styles/pgx/enum.pgx.tpl
// styles/pgx/mro.cfg.mrotpl
// styles/pgx/pgx.go.mrotpl
// styles/pgx/table.pgx.tpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pgxDescriptionTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x50\x50\x50\x28\x48\xaf\x50\xd0\x55\x70\x4f\xcd\x4b\x2d\x4a\x2c\x49\x55\xc8\x4d\x2c\x2a\xce\x48\xcc\xc9\xc9\xcc\x4b\x57\x48\xce\x4f\x49\x55\x48\xcb\x2f\x52\x08\xc8\x2f\x2e\x49\x2f\x4a\x0d\x0e\xf4\x51\x28\x2d\x06\xc9\xa4\x67\x96\x64\x94\x26\xe9\x25\xe7\xe7\xea\x67\x25\x26\x67\x27\xeb\x17\xa4\x57\x70\x01\x02\x00\x00\xff\xff\x53\xec\x2d\x68\x4e\x00\x00\x00")

func pgxDescriptionTxtBytes() ([]byte, error) {
	return bindataRead(
		_pgxDescriptionTxt,
		"pgx/description.txt",
	)
}

func pgxDescriptionTxt() (*asset, error) {
	bytes, err := pgxDescriptionTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pgx/description.txt", size: 78, mode: os.FileMode(420), modTime: time.Unix(1506715570, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pgxEnumPgxTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x55\x3d\x6f\xdb\x3c\x10\xde\xf9\x2b\xee\x15\x3c\x48\x81\x23\xbd\x5d\x3a\x04\xc8\xd8\xa5\x68\xd3\x02\x69\xbb\x04\x19\x68\xe9\x64\xb3\x96\x48\x87\xa4\x9c\x18\x04\xff\x7b\xc1\x0f\xcb\x64\x60\x1b\x05\x6a\xc0\x80\x74\xdf\xcf\x3d\x77\xa7\x1d\x6d\xb7\x74\x8d\x60\x4c\xfd\x9d\x4a\x3a\xd6\x51\x60\x2d\x21\x6c\xdc\x09\xa9\xa1\x24\x00\x00\x05\xf2\x56\x74\x8c\xaf\x9b\xdf\x4a\xf0\x22\xca\xa4\x14\x52\xc5\x97\x8e\x6a\xba\xa2\x0a\x1b\xf5\x32\x34\x9d\x64\x7b\x94\x05\xa9\x08\x69\x1a\x00\x63\x16\x6b\xc1\xe9\x88\x70\x77\x0f\xf1\xa9\xfe\xc4\xa7\xb1\x7e\xa0\x23\x5a\x3b\xeb\xad\x05\x89\x3b\x89\x0a\xb9\x56\xa0\x37\xbe\xb2\xc4\x10\x90\x4f\x23\xd1\x87\x1d\x42\xea\x33\x31\xae\x3f\x7c\x24\xa4\x15\x5c\x69\x28\x8d\x91\x94\xaf\x11\x16\x6c\x09\x8b\x81\xae\x70\x70\x79\x43\x9c\x2f\xee\x55\x59\x4b\x00\x9a\xc6\x05\xf1\x7a\xff\x9e\x44\x34\x26\x56\x79\x54\x1b\xc3\x7a\xc0\x17\x58\x30\xf8\xdf\x5a\xb8\x07\x26\x34\x35\x06\x79\x67\x2d\x31\xe6\x16\xc2\x53\xc0\xfb\xa8\x25\xe3\x6b\x90\xa8\x27\xc9\x03\x0c\x15\x44\x7b\x3a\x4c\x08\xa2\xf7\x32\x1f\x9a\xf4\x13\x6f\xa1\xcc\xf0\x54\x31\x42\x59\x1d\xfd\x0c\x01\x50\xaf\x4c\xb7\x1b\x40\x30\xe0\x12\x46\x88\x97\xe1\x01\xb4\x54\xe1\x55\x54\x77\xde\x0c\x62\xa5\x50\x9c\xda\x51\x90\x23\x38\x00\xf7\x3f\x5a\x14\xc4\x7a\x88\x5f\xa9\x54\x1b\x3a\xfc\xc0\x37\x0d\x63\x78\x56\x19\x25\x8c\x6b\x01\x1a\xdf\xf4\x79\x80\x89\x7f\x59\x41\xf9\xf4\xbc\x3a\x68\x5c\x82\x9f\xa8\xca\xc3\x8d\x19\x83\xa6\xc4\xfa\xd8\x92\x6a\x09\x9c\x0d\xb1\x8c\x9f\x7c\x4c\x0a\x99\xf8\xd9\x52\x7a\x29\xc6\xbc\x94\x9b\xac\x96\x2c\x48\xe9\x0c\x63\xd6\x2a\xd4\xe3\xcb\x99\xfb\x1f\x18\xf1\x66\xd5\xdf\x53\x31\xd3\x91\xf6\xf8\x6e\x56\xb9\xdf\x0d\xc2\xfd\x55\xb6\x12\x4a\xc2\xaf\xc3\x9e\x4e\x83\xce\xc3\xc4\xbe\x85\xdd\xac\x1f\xf0\xb5\x2c\x18\xdf\xd3\x81\x75\x69\xf0\xa2\xf2\x4e\x21\x56\x74\x39\xb5\xf5\x97\x1f\x53\x45\x35\x53\x3d\x43\x05\xa7\x95\xae\xbd\x4a\x9e\x27\xd5\xeb\x1c\x9d\xa9\x6d\x46\xea\xa9\xbc\x99\xcf\x94\xce\xc7\x96\xf2\x3c\x6d\xed\x44\x3c\x49\x98\x53\xe7\xb4\xa5\x92\xad\x1b\x37\x94\x3d\x6d\xd1\xd8\x9c\xb5\xd5\xd4\x2f\x41\x6c\x1d\x2d\x4a\xb6\x75\x9c\xb4\x80\x9e\xf5\xf0\x9f\xd8\x46\xc3\x7f\xeb\x1d\xd6\xf9\x14\xad\xa6\xbe\x3a\x35\x93\x75\xe9\x3c\xee\xa4\xd8\xb3\x0e\x15\xd0\x61\xf0\x87\x20\x64\x70\xa7\x2d\xdc\x04\x15\xd0\xbe\x77\x2c\x2b\x78\x7a\x4e\x0e\x42\xb2\x23\x41\x9a\x4d\xe3\x95\xdb\xe7\x8f\x19\xc7\x78\xcc\x96\x10\xe7\x2a\x1d\x4d\x2f\x82\x5b\x6b\xc1\xe6\x1b\xff\xf9\xf1\xdb\x03\xf4\x42\xc2\x48\xb7\xae\x10\xf7\x7e\x75\xc5\x9d\xc1\x85\x15\x9f\x01\xb8\x6f\x4a\x1d\xed\xd3\x55\x7f\xbf\xe5\x73\xf2\xcd\xa1\x93\x54\xbb\xfc\x7e\xb9\x9d\xff\xa5\xe5\xde\xa4\xce\xa5\xfb\x4a\x9d\xdd\xee\x0b\x3c\x3a\x7b\x57\xc6\x9f\x00\x00\x00\xff\xff\xf5\xd3\xa7\x75\x29\x07\x00\x00")

func pgxEnumPgxTplBytes() ([]byte, error) {
	return bindataRead(
		_pgxEnumPgxTpl,
		"pgx/enum.pgx.tpl",
	)
}

func pgxEnumPgxTpl() (*asset, error) {
	bytes, err := pgxEnumPgxTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pgx/enum.pgx.tpl", size: 1833, mode: os.FileMode(420), modTime: time.Unix(1506726761, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pgxMroCfgMrotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x6d\x6f\xdb\x36\x10\xfe\xae\x5f\x71\x90\x07\x14\x30\x5a\x05\xdb\x8a\x61\x18\x60\x0c\x6d\xdd\x17\x77\x5d\x9a\xe6\x05\xfb\x50\x14\x05\x2d\x9d\x25\x6e\x14\xa9\x90\x47\x3b\x6a\x90\xff\x3e\x1c\x29\xc9\x92\xe3\x02\x4b\x37\xec\x53\x9c\xe7\xc8\x7b\x7d\x8e\x77\x9a\xc1\x1b\xb3\x03\x32\x90\x1b\xad\x31\x27\xfe\x49\x15\x42\x21\x48\xac\x85\xc3\x0c\x5e\x4a\xaa\xd0\x82\xe8\x4f\x48\xa3\xc1\x91\x95\xba\x04\xc3\xf0\xd5\xf9\x2a\x4b\x5e\x0c\xb2\x8b\x28\x5a\x40\x9a\x26\xc9\x0c\x5e\xa3\x46\x2b\x08\x21\x37\x05\x02\x6b\x2c\xc0\x68\x36\xe1\x10\x48\xac\x15\xba\x0c\xae\x1c\x42\x3a\x4f\x41\x38\x10\x50\x2a\xb3\x7e\xe2\xa8\x55\x08\x3b\xa9\x8a\x5c\xd8\x22\x59\xe9\x5c\xf9\x02\x2f\xc3\x79\x58\xc0\xc7\xb4\xf1\x6b\x25\xf3\x6c\x9e\x7e\x62\x2b\x4b\xa3\x1f\x11\x78\x56\x39\x51\xfc\x7e\x8b\xd6\xca\x02\x1d\x4c\x34\x64\xc9\xcb\x9b\x03\x85\x41\xcd\x65\x85\xf0\xda\x00\xb5\x0d\x3a\x4e\x04\x2b\xdc\x18\x1b\xd5\xc1\x46\xa2\x2a\x1c\x50\x25\x08\x2a\xb1\x45\x10\xa0\x0d\x81\xf6\x4a\x71\x6e\x1c\x59\x21\x35\x25\xa7\x86\x4e\xbd\x52\x97\x41\xc9\x6d\x02\x00\xb0\x36\x46\xa1\xd0\x9c\x14\xfe\x99\x46\xb0\x25\x14\x0c\x7d\xfc\xc4\x3f\x23\x98\xcb\xc2\x32\xa6\x91\xb2\xd5\x59\x8f\xd9\x5c\x21\xa3\x4d\xc9\xae\x65\x2f\x02\x10\x85\x05\xe7\x76\x01\x29\xc9\x1a\xb3\x4b\x59\x8f\x60\x2b\x74\x39\xbe\xb6\xec\xb1\x78\x64\xa3\x8c\xa0\xa7\x2c\x0f\xbf\x7e\xfc\x61\x04\xff\x3c\xc0\x3f\x3d\x8d\x70\xe5\xc8\xd8\xb1\xb6\x37\x01\x88\x42\xa9\x91\x0e\xbd\x96\x9a\xb0\xc4\x10\x8c\xd4\xb4\xc7\xec\x56\xa8\xc1\xe1\xa5\xb7\x82\x49\x13\xc5\x7f\x3a\xa3\x47\x16\xde\x5e\xbc\x3f\xdd\x0b\xd6\x07\x92\xe7\x51\x54\x8b\x5c\x14\x31\x67\x9d\xf0\xf7\x88\x44\xb1\xf6\x35\x5a\x99\xdf\x0b\xc7\xd5\x42\x29\xa9\x69\xe2\x1e\xe1\x4d\x00\x22\xbb\x23\x96\x32\xf8\xf1\x53\x1a\x0b\x35\x96\x70\x00\x8e\x44\xdd\xd0\x97\x23\x05\x18\xa4\x47\x64\xde\xcb\x82\x61\xfe\x9b\x5d\x5d\xad\x96\x11\xde\x0a\x9b\x57\xc2\x8e\x3d\xb8\x7b\x18\x2b\x6b\xd1\xc2\x1a\x03\x23\x93\x09\xff\x64\xd9\xc5\xea\xae\x55\xc6\xec\x5c\xe9\x21\x15\x23\x72\xf6\xd2\xe7\xff\x8c\xa4\xf3\x71\xbd\x53\x46\xbb\x44\xf5\x3c\x5d\x2d\xcf\x9f\x59\x2b\xda\x07\xf0\xb8\xb9\x0e\x1e\x7c\x23\x93\xfb\x00\x5e\xbd\x1b\xd5\x7a\xcf\xe8\x41\xfc\x60\x66\x4f\x43\x65\x74\x1a\xea\x4a\x23\x8d\x42\x1d\x91\xff\x48\xc6\xc7\x6d\x30\xff\xdf\xfb\xe0\x68\x12\xc6\xfd\x70\xc4\xe3\xa1\x33\x3a\xd1\xc5\xd7\xfb\xe0\x5e\x01\x27\x9d\x70\x4f\x3a\xe9\x05\x16\x1d\xef\x87\x03\xbb\xa1\x2f\xde\x7b\x6a\x7c\x78\xf5\x37\x5e\x85\x81\x05\x78\x43\x56\xe4\x84\x05\x6c\xac\xa9\x27\x83\x2c\x0e\x36\xe9\x60\x23\x15\x82\xdc\x80\x43\xca\x92\xb7\xce\xe8\x4e\xcf\x02\xd2\xda\x9a\x8c\x73\x1c\x26\xd7\x1f\x56\x12\x02\x6a\x5f\xc7\xd9\x35\xbe\xaf\x45\x8d\x61\x6c\x39\x28\x0d\x10\xd6\x8d\x12\x84\x0e\x76\x92\x2a\xc8\x2e\xf2\x0a\x6b\x01\x42\x17\x90\x9d\x8a\x1a\x93\x97\xda\xd7\xaf\xba\x6b\x6c\xe7\xf6\x36\xe0\x77\x77\x19\x5b\x2c\x4d\xb0\x77\x15\xa6\x97\x74\x83\x3a\xb6\x58\xf6\xe3\x73\xf0\x23\x0b\xda\x2e\xfb\x33\x0b\x48\x59\x94\x35\xe5\x4d\x46\x8d\x1a\x79\x1e\x9f\x87\x7f\xeb\x7a\x98\x90\xbd\xef\xdf\xe6\xfa\xde\x91\x2c\xaa\x1b\x3b\x1f\x84\x13\xef\x9f\x6d\x8d\x2c\xc0\x3b\xde\x22\xe2\x34\x67\xd3\x8e\x97\x83\x8d\xd7\x71\xff\x68\x84\x15\x35\x12\x5a\x97\xcc\xe0\x1c\x1d\xda\x2d\x16\xa7\xe1\x58\x3f\xcb\xcf\x7d\xbf\x65\xe4\xa6\xae\x85\x2e\x1c\xef\x1d\x28\xf2\x2a\x32\x40\x6c\x08\x6d\xef\xa4\x34\x3a\x39\x33\x8e\xce\xac\xc9\xd1\xc5\x0d\xa3\x34\xb2\x6e\x8c\x25\x07\x4f\x76\xbc\x65\xf4\x5e\x9f\x0d\xb6\xbb\xd7\x75\x06\xcf\x8a\x02\x84\x6e\x41\x14\x85\x64\x5d\x42\xed\x33\xb1\x77\x15\x2a\xb4\x18\xa9\x3b\x6c\x45\xa9\x43\xc5\x5b\xd7\xbc\x23\x6c\x48\xd5\x8e\x0f\x42\x63\x65\x2d\x6c\xfb\xf9\x2f\x6c\x61\x01\xbf\xa6\x70\xed\xd1\x4a\x74\x49\x7f\xf9\xec\xb7\x0f\x11\x81\x05\x90\xf5\xf8\x9f\x29\xbe\xd2\xf2\xda\xe3\x7d\xe5\xa1\x78\xe0\x1a\xcc\xe5\x46\xe6\xdc\x40\x24\x75\xe9\x62\x51\xe1\x36\x99\xc1\x0c\x5e\xf1\x60\xaa\xfa\xa2\xa7\xb9\xd1\x1b\x59\xa6\xc9\x0c\xe2\xaf\x70\x2a\xe4\x8c\x39\x63\xb4\x6a\x87\x22\x29\x5f\x6b\x17\xa5\xdd\xb2\xf6\x22\x62\xb1\xa4\xdd\xb5\xc3\x4d\x2f\xde\x2b\xa2\xb8\xdb\xea\x8e\xdd\x63\x73\x75\x9b\xbd\x36\x3c\x17\xc3\xf8\x8c\x37\x3f\x33\xb9\x1e\x83\x15\x61\xc9\xa5\x4a\x68\xd8\x55\x82\x70\x8b\x16\xa4\x03\x19\x48\x04\x71\x98\xba\xb8\xe1\x46\x95\xd1\x48\xd0\xd6\xc5\xc4\x23\x6e\xaf\x33\xbc\x27\xbd\xc1\x34\x9e\xb8\xeb\xbd\x19\xca\xc4\x76\x5a\xaa\x98\xeb\x82\x87\xb8\xf1\x65\x35\xca\xdf\x4e\x38\xc8\x85\x52\x58\xc4\xfe\x92\xda\x11\x8a\x2e\xda\xf3\xe1\x3d\x11\x4d\xf3\x39\xe6\x77\x98\x23\x33\xb8\x63\xaa\xf5\x45\x3c\x64\xea\xc5\x87\x77\x7d\xd9\xa1\x35\x1e\x76\x42\x53\xe0\xe7\x63\xc0\xac\xcc\x7e\x89\xc7\xbb\x4b\x31\x5c\x56\xff\xbc\x5d\x2d\xc3\x7b\x3c\x21\x57\x57\xda\xc8\xae\xf0\x9c\x7f\xf7\x7d\x3a\xd1\xc0\x66\x4f\xe6\xa1\x91\x61\x7e\xc2\xdf\x0d\xfd\x7f\x5d\x41\xe6\x27\x5d\x43\x8a\x7d\xc3\x00\x99\xee\x7a\xee\x1d\x99\x5a\x7e\x09\x45\x8f\xf7\xf8\x85\xe2\x31\x07\x32\xb0\xc1\x7d\xc5\xef\x87\xba\xcd\x7e\x45\x7c\xb5\xe4\x39\x0d\xf3\x93\x69\x24\x91\x9a\xdd\xdb\xd4\x7f\x07\xa5\x27\x73\xe0\xf7\x4a\xa1\x35\x3b\xbe\xc2\x11\x32\x58\x7b\x45\xb2\xc7\x3a\x2e\x71\xda\x5b\xfe\xb4\x51\x60\xba\xcf\x93\x4e\x77\x6d\xcd\x23\x7e\x25\xbc\x95\x8e\x64\xee\x42\x90\xe5\xe4\x03\x8a\x0c\x58\x24\x6f\x35\x88\xce\x22\xb0\xfa\xf0\x21\xe6\x94\xcc\x11\xcc\x86\x11\x97\x25\x77\xc9\xdf\x01\x00\x00\xff\xff\xe6\x15\xad\x3e\xdc\x0d\x00\x00")

func pgxMroCfgMrotplBytes() ([]byte, error) {
	return bindataRead(
		_pgxMroCfgMrotpl,
		"pgx/mro.cfg.mrotpl",
	)
}

func pgxMroCfgMrotpl() (*asset, error) {
	bytes, err := pgxMroCfgMrotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pgx/mro.cfg.mrotpl", size: 3548, mode: os.FileMode(420), modTime: time.Unix(1506965326, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pgxPgxGoMrotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xcb\x3f\x4b\xc6\x30\x10\x80\xf1\xfd\x3e\xc5\xf1\x4e\xad\x94\x64\x77\xf4\xcf\x28\x62\x71\x2b\x1d\x62\x3c\xcf\x58\x92\x0b\xd7\x94\xb6\x94\x7e\x77\xb1\xa8\xcb\x4b\xb7\x07\x1e\x7e\xd9\xf9\xc1\x31\x61\xd7\x99\xdf\xec\x7b\x00\x6b\x59\x6e\x99\x12\xa9\x2b\x84\x51\x05\x20\xc4\x2c\x5a\xb0\x02\x44\xc4\x0b\x87\xf2\x39\xbd\x19\x2f\xd1\x7e\x39\x3f\x78\x9b\x79\xb9\x40\x0d\x50\xd6\x4c\xf8\xd4\x3e\x3f\xdc\x61\x48\x85\xf4\xc3\x79\xc2\xed\x40\x8f\x0b\xf9\x6a\x2c\x1a\x12\x37\x68\x8c\xf9\xff\xdb\x5e\x63\x95\x79\x31\xf7\x12\xa3\x4b\xef\xaf\x8e\x1b\x24\x55\xd1\xfa\x80\x2f\x13\xe9\x7a\x2e\x6f\x7e\x68\x2b\xf3\x78\x8d\x5a\x99\x4f\xdd\x1f\x83\xfd\x3b\x00\x00\xff\xff\xd4\x7c\x02\x66\x04\x01\x00\x00")

func pgxPgxGoMrotplBytes() ([]byte, error) {
	return bindataRead(
		_pgxPgxGoMrotpl,
		"pgx/pgx.go.mrotpl",
	)
}

func pgxPgxGoMrotpl() (*asset, error) {
	bytes, err := pgxPgxGoMrotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pgx/pgx.go.mrotpl", size: 260, mode: os.FileMode(420), modTime: time.Unix(1506799283, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pgxTablePgxTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x5f\x6f\xdb\xb6\x17\x7d\xd7\xa7\xb8\x3f\xc3\x2d\xa4\xfc\x5c\x19\x7b\x0d\xe0\x87\xad\xee\xb6\x02\x5b\xb3\x25\x0d\x30\x60\x18\x66\x5a\xba\x72\x98\xd2\xa4\x44\xd2\xb1\x03\x42\xdf\x7d\x20\x29\xd9\xb4\xad\xc8\xce\xd2\x0d\xe8\xb6\xbc\x44\x16\xc9\xfb\xef\x9c\x7b\x48\xaa\x24\xd9\x27\xb2\x40\x30\x26\xfd\x89\x48\xb2\x4c\x9b\x17\x75\x1d\x19\x03\x43\xa5\xc9\x9c\x21\x5c\x4e\xa0\x94\x94\xeb\x02\x06\xaf\x54\xfa\x4a\x0d\x20\x5e\x92\xc7\x39\x56\x2b\xa1\x11\xd2\x8f\x76\x52\x7a\x93\xdd\xe1\x92\x24\x5d\x43\x1f\xc8\x12\x13\xa8\xeb\x68\x3c\x86\xc0\x6c\x5d\x47\x11\x5d\x96\x42\x6a\x88\x23\x00\x80\x01\x4a\x29\xa4\x1a\xf8\x1f\x9a\x2e\xb1\x79\xe4\xa8\x9b\xa7\x05\xd5\x77\xab\x79\x9a\x89\xe5\xf8\x9e\x64\x9f\xb2\x71\xb9\xd8\xf4\x0c\x8d\xcb\x85\x7e\x2c\x5b\x33\x39\xd1\x64\x4e\x14\x8e\x55\xc5\x8e\x17\x31\x3a\x1f\x97\xd5\x20\x4a\x22\x1b\x27\x18\x33\x5c\x08\x4e\x96\x2e\xfd\xe6\x29\xc8\xa7\xae\xb7\x13\xea\x1a\x24\x96\x12\x15\x72\xad\x80\x80\x14\x6b\x28\xa4\x58\xda\xaa\x86\x0b\x22\x1b\x0a\x84\xcb\x94\x96\xab\x4c\x83\x01\x63\xde\x80\x24\x7c\x81\x30\x2c\xac\xbf\x66\xdd\xb7\x14\x59\xae\xea\x3a\xb2\xe1\x34\x31\x0c\x8b\xc6\x9c\xb5\x54\xa4\xdf\x89\x8f\x8f\xa5\xfd\x35\xbb\x57\x82\x5f\x0e\xdc\x4b\x3f\x61\x30\x33\x06\x79\x5e\xd7\x51\x1d\x45\x99\xe0\x4a\x87\xce\xdf\x0a\xb6\x5a\x72\x05\x13\x98\x19\x73\x2f\x28\xef\x42\xce\x07\x90\xc0\x60\x04\x83\xba\x9e\x45\x91\x31\xb4\x68\x07\xdf\x4f\xdd\x70\x9b\x5d\xd7\xd0\xf7\x44\x4d\xb1\x20\x2b\xa6\x3d\xfa\xef\xb9\x42\xa9\x81\xec\x55\x81\x72\x2d\x40\xdf\x21\xb4\xf8\x44\xc5\x8a\x67\x10\x6b\xb8\x08\xa6\x25\xcd\xe2\x38\x9f\xc3\x8f\xd7\x57\xd3\x6f\x12\x70\x74\x01\xe3\x90\xb4\x15\x1c\xe6\x85\x8b\xd7\x56\x10\x37\x19\x5b\xe5\xe8\x5e\xec\x67\x73\x10\xa3\xab\x2e\x80\xaf\x8f\xaa\x98\x2d\x08\xf5\x61\xba\xc0\xf6\x08\x0b\xf1\x0c\xfe\xef\xe6\x43\x67\xd9\xda\x08\xb6\x15\xdb\xcd\x4e\xe0\x81\xb0\x15\xaa\x4e\x13\x73\xca\xf3\x07\x22\x55\xbf\x01\x89\x7a\x25\x39\xe5\x0b\x30\xe6\x18\xab\x7d\x38\x66\x6e\x19\x4a\x69\x8b\x91\xcf\xd3\x9f\x57\x28\x1f\xaf\xc5\x3a\x56\x15\x1b\x41\xeb\xd7\x17\x77\xe7\x16\x06\x3a\x1d\xb4\xbe\x93\xf4\x26\x23\x3c\x7e\xad\xd3\x2d\xf9\x3a\x5d\x25\xce\x15\x2d\x9c\xb7\xff\x4d\x80\x53\xd6\x80\x62\xff\x7c\xd0\x76\xcc\xbd\xf2\xd5\x6e\x5e\x72\xca\x22\x4b\x1c\x64\x0a\xff\x6a\x82\x7c\x1e\x80\xbb\xfb\xe2\xb9\x28\x9f\xb4\xe2\xd1\xfb\x7d\x14\x00\xf8\x6e\x83\x59\x37\x78\xfb\xec\xde\x43\xf0\xe5\xc8\x58\xfd\x30\x66\x7c\x01\xc7\x2d\x0d\x17\x63\x2b\xe1\xe3\x31\xdc\x96\x39\xd1\x08\x84\x03\x6e\xa8\xd2\x9e\xa1\x21\x7e\xe7\xa0\xe7\x8d\xfc\x1d\xed\xbd\xf2\xe1\x1a\xd3\xe0\x6e\x95\x18\xf5\x8b\x7a\x7b\xf2\x82\xb6\x5e\xdf\xa1\xc4\x33\x5a\x1a\x26\x30\x34\x86\xda\xda\x31\xe4\x3b\x9b\x4e\x98\x9f\xc1\x97\xce\x66\x1f\xc1\x79\x6d\x1e\x90\xa6\xc5\xfe\x05\x1d\xeb\x17\xff\x13\x3a\x16\x04\xb7\x01\x17\x8c\x66\x1a\xe2\xd3\x60\x26\x90\x0b\x68\x88\x78\x06\xf9\x4e\xfb\xef\x66\x60\x29\xb1\xa0\x9b\x5e\x53\xef\x7e\x79\xfb\xc3\xed\xf4\xdd\x74\xc7\x85\x7d\x25\xfa\x9c\x52\x74\xc4\x9e\x29\x32\xb4\xca\xb1\xc7\x1e\x77\x78\x3a\x83\x3d\x7e\xf1\x39\xec\xc9\xbd\x9b\xe6\x54\x16\xb2\xe7\x39\xcd\xf7\x55\x7f\x31\xfe\x44\x03\xb5\x5b\xdf\x9e\xc2\xda\xd9\x5e\x5b\xff\xdb\x10\xbf\x80\x0d\x71\x07\x97\x47\xe1\x6b\xc6\x02\x10\x82\xe2\xc7\xbf\xfe\x16\x0c\x8c\x3c\x18\x49\x17\x1a\x0a\x19\x66\x1a\x5e\x56\xf9\x86\xec\xdb\x3d\xae\x21\x6f\x35\x3a\x3c\x15\xda\x22\x9e\x55\x18\x4e\xd9\xe8\xa0\x3a\x39\x16\x28\xa1\x4a\xdf\x32\xa1\x30\x6e\x19\xae\xec\xe9\xe0\x72\x02\x41\xc2\xf0\xc6\xde\x58\xfc\xa2\x42\xd8\x25\x1f\x70\xa3\xe3\x24\xf0\xf2\x40\xa4\xbb\x3b\x05\x45\xda\x8e\xd9\xb0\x26\x50\xf9\x13\xe9\x09\xbc\x5f\x4b\xb1\x3e\x84\xbc\x2f\xbb\xa7\x32\xdc\x65\x19\x64\x35\x01\x52\x96\xc8\xf3\xd8\xff\x1e\xd9\x88\x93\x63\xba\xb4\xa3\x9e\x36\x9e\x18\xb7\x7c\x49\xa4\xba\x23\xec\x8a\x63\xc8\x10\x9b\xf3\x45\xb9\xd8\xa4\xd7\x62\x3d\x02\x79\xd0\xc3\x61\xcb\xb6\xc6\xc5\xfa\xcc\x42\x84\x65\x38\x0a\x23\x8c\xa1\xda\x46\xa0\x4e\x10\xb5\x13\xdd\xba\xee\x87\xd6\xa6\x78\x39\x81\xe3\xf9\xb0\xbb\xa4\x7c\xb1\xe0\x5a\xbd\xd4\xbb\x5b\x3b\xb8\xbb\x70\x73\x9b\xaf\x82\xdb\xbc\x6d\x36\x8a\xaa\xbd\x2a\x0f\xab\xf4\x86\xf2\x05\xc3\x6b\xb1\x6e\xbf\x8d\x0c\xab\x76\xbb\xf1\xae\x94\x53\xf9\x26\x3a\x51\xb8\x0f\x13\x7e\x9a\xeb\xdc\xd6\x14\xb7\x9e\xfc\x2b\xfb\x70\x25\xe9\x82\x72\xc2\x9a\x39\x6e\x51\x2c\x9a\x97\xec\xd1\x1b\x38\x98\x94\xb4\xdf\x0a\x1c\x47\x82\x48\xb6\x02\xb6\xcd\xa9\xb4\x39\x0d\x2b\xff\xc5\x08\x35\x4a\x65\x9b\x3b\xb2\x3a\x3c\x2c\x83\x8f\x13\xe5\xf6\xe3\x44\x64\x8f\xef\xce\x7c\x62\xcf\x46\xdd\xd4\xda\x53\xc0\x30\x47\xab\xfd\xdd\xda\x70\xea\x7a\xdb\x9c\x77\xc3\x50\x0f\x2e\xb7\x47\x67\x63\xdd\xc3\xb4\x5d\xfb\x8d\x0e\xf6\xef\x7f\x0f\x7a\x4f\x4b\x43\x9f\x30\xf4\x62\xdb\xbd\x23\x9d\x87\x62\xf4\x54\xe7\x1f\xf7\xbc\x8d\xe3\x78\xbb\xea\x14\xac\x1e\xb9\xea\xdd\x88\x7a\xd9\xd3\xaf\x52\xdd\x1a\x55\x47\x67\xe9\x53\x1d\x3d\xa1\x4d\x2d\x2d\x9a\xff\x7f\x04\x00\x00\xff\xff\x68\x2e\x7d\x43\xef\x15\x00\x00")

func pgxTablePgxTplBytes() ([]byte, error) {
	return bindataRead(
		_pgxTablePgxTpl,
		"pgx/table.pgx.tpl",
	)
}

func pgxTablePgxTpl() (*asset, error) {
	bytes, err := pgxTablePgxTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pgx/table.pgx.tpl", size: 5615, mode: os.FileMode(420), modTime: time.Unix(1506964194, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"pgx/description.txt": pgxDescriptionTxt,
	"pgx/enum.pgx.tpl": pgxEnumPgxTpl,
	"pgx/mro.cfg.mrotpl": pgxMroCfgMrotpl,
	"pgx/pgx.go.mrotpl": pgxPgxGoMrotpl,
	"pgx/table.pgx.tpl": pgxTablePgxTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"pgx": &bintree{nil, map[string]*bintree{
		"description.txt": &bintree{pgxDescriptionTxt, map[string]*bintree{}},
		"enum.pgx.tpl": &bintree{pgxEnumPgxTpl, map[string]*bintree{}},
		"mro.cfg.mrotpl": &bintree{pgxMroCfgMrotpl, map[string]*bintree{}},
		"pgx.go.mrotpl": &bintree{pgxPgxGoMrotpl, map[string]*bintree{}},
		"table.pgx.tpl": &bintree{pgxTablePgxTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

